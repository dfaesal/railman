swagger: '2.0'
info:
  version: 1.0.0
  title: RailMan App
  description: REST API for managing restaurants, customers, orders, and menu items.
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

definitions:
  Customer:
    type: object
    required:
      - name
      - email
      - password
      - role
    properties:
      name:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
        pattern: "^(?=.*[0-9])(?=.*[a-zA-Z]).{8,}$"
        minLength: 8
        example: "qwer1234!@"
      phone:
        type: string
        pattern: "^[0-9]{10}$"
        example: "8084080840"
      address:
        type: string
      city:
        type: string
      role:
        type: string
      pincode:
        type: string
        pattern: "^[1-9][0-9]{5}$"
        example: "560076"

  Restaurant:
    type: object
    required:
      - name
      - email
      - password
      - role
    properties:
      name:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
        pattern: "^(?=.*[0-9])(?=.*[a-zA-Z]).{8,}$"
        minLength: 8
        example: "qwer1234!@"
      phone:
        type: string
        pattern: "^[0-9]{10}$"
        example: "8084080840"
      address:
        type: string
      city:
        type: string
      role:
        type: string
      pincode:
        type: string
        pattern: "^[1-9][0-9]{5}$"
        example: "560076"
      rating:
        type: number
        format: float
        example: 4.3

  MenuItem:
    type: object
    required:
      - name
      - price
    properties:
      name:
        type: string
        example: pizza
      price:
        type: number
        format: float
        example: 203.45
      quantity:
        type: integer
        format: int32
        example: 3

  Order:
    type: object
    required:
      - orderItems
      - status
      - customerName
      - restaurantName
      - total_cost
    properties:
      user:
        type: integer
        example: 7
      orderItems:
        type: array
        items:
          type: string
          example: ["pizza","burger","tea"]
      status:
        type: string
        example: pending
      customerName:
        type: string
        example: John Doe
      restaurantName:
        type: string
        example: Pizza Hut
      total_cost:
        type: number
        format: float
        example: 230.50
  City:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string

paths:
  /authentication/register/:
    post:
      summary: Register a new user
      tags: ["Authentication"]
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object to be registered
          required: true
          schema:
            $ref: "#/definitions/Customer"

      responses:
        "201":
          description: User created successfully
        "204":
          description: Invalid request data
        "400":
          description: User Exists
  /authentication/login/:
    post:
      summary: Log in a user and get JWT token
      tags: ["Authentication"]
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          description: User credentials to log in
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                pattern: "^(?=.*[0-9])(?=.*[a-zA-Z]).{8,}$"
                minLength: 8
                example: "qwer1234!@"
              role:
                type: string
      responses:
        "200":
          description: Login Success
        "204":
          description: Wrong login details
        "404":
          description: User does not exists
  /core/cities/:
    get:
      summary: Get all cities
      tags:
      - Core
      responses:
        "200":
          description: List of all cities returned
          schema:
            type: array
            items:
              $ref: "#/definitions/City"
        "400":
          description: Cities list is empty
  /core/cities/{id}/:
    get:
      summary: Get a specific city by ID
      tags:
      - Core
      parameters:
      - in: path
        name: id
        description: ID of city to retrieve
        required: true
        type: integer
        format: int32
      responses:
        "200":
          description: City with specified ID returned
          schema:
            $ref: "#/definitions/City"
        "404":
          description: City with id not found
  /core/customers/:
    get:
      summary: Get all customers
      tags:
      - Core
      responses:
        "200":
          description: List of all customers returned
          schema:
            type: array
            items:
              $ref: "#/definitions/Customer"
        "400":
          description: Customers list is empty
    post:
      summary: Create a new customer
      tags:
        - Core
      consumes:
        - application/json
      parameters:
        - in: body
          name: customer
          description: Customer object to be created
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "201":
          description: Customer created successfully
          schema:
            $ref: "#/definitions/Customer"
        "400":
          description: Invalid Data Request
  /core/customers/{id}/:
    get:
      summary: Get a specific customer by ID
      tags:
      - Core
      parameters:
        - in: path
          name: id
          description: ID of customer to retrieve
          required: true
          type: integer
          format: int32
      responses:
        "200":
          description: Customer with specified ID returned
          schema:
            $ref: "#/definitions/Customer"
        "404":
          description: Customer/User not found
    put:
      summary: Update a customer
      tags:
        - Core
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of customer to update
          required: true
          type: integer
          format: int32
        - in: body
          name: customer
          description: Customer object with updated data
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "200":
          description: Customer updated successfully
          schema:
            $ref: "#/definitions/Customer"
        "404":
          description: Customer/User not found
        "400":
          description: Invalid data request
    delete:
      summary: Delete a customer
      tags:
      - Core
      parameters:
        - in: path
          name: id
          description: ID of customer to delete
          required: true
          type: integer
          format: int32
      responses:
        "204":
          description: Customer deleted successfully
        "404":
          description: Customer/User not found
  /core/restaurant/:
    get:
      summary: Get all restaurants
      tags:
      - Core
      responses:
        "200":
          description: List of all restaurants returned
          schema:
            type: array
            items:
              $ref: "#/definitions/Restaurant"
        "404":
          description: Restaurant list is empty
    post:
      summary: Create a new restaurant
      tags:
        - Core
      consumes:
        - application/json
      parameters:
        - in: body
          name: restaurant
          description: Restaurant object to be created
          required: true
          schema:
            $ref: "#/definitions/Restaurant"
      responses:
        "201":
          description: Restaurant created successfully
          schema:
            $ref: "#/definitions/Restaurant"
        "400":
          description: Invalid data request
  /core/restaurant/{id}/:
    get:
      summary: Get a specific restaurant by ID
      tags:
      - Core
      parameters:
        - in: path
          name: id
          description: ID of restaurant to retrieve
          required: true
          type: integer
          format: int32
      responses:
        "200":
          description: Restaurant with specified ID returned
          schema:
            $ref: "#/definitions/Restaurant"
        "404":
          description: Restaurant not found
    put:
      summary: Update a specific restaurant by ID
      tags:
        - Core
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of restaurant to update
          required: true
          type: integer
          format: int32
        - in: body
          name: restaurant
          description: Updated restaurant object
          required: true
          schema:
            $ref: "#/definitions/Restaurant"
      responses:
        "200":
          description: Restaurant updated successfully
          schema:
            $ref: "#/definitions/Restaurant"
        "404":
          description: Restaurant not found
        "400":
          description: Invalid data request
    delete:
      summary: Delete a specific restaurant by ID
      tags:
        - Core
      parameters:
        - in: path
          name: id
          description: ID of restaurant to delete
          required: true
          type: integer
          format: int32
      responses:
        "204":
          description: Restaurant deleted successfully
        "404":
          description: Restaurant not found
  /core/restaurants/:
    get:
      summary: Get all restaurants by city
      tags:
      - Core
      parameters:
        - in: query
          name: city
          description: Name of city to filter restaurants by
          required: true
          type: string
      responses:
        "200":
          description: List of restaurants in specified city returned
          schema:
            type: array
            items:
              $ref: "#/definitions/Restaurant"
        "400":
          description: Invalid Data Request
  /core/orders/:
    post:
      summary: Create a new order
      tags:
      - Core
      consumes:
      - application/json
      parameters:
        - in: body
          name: order
          description: Order object to be created
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid Data Request
  /core/orders/{restaurant_or_user_id}/:
    get:
      summary: Get orders for a restaurant or user
      tags:
      - Core
      parameters:
        - in: path
          name: restaurant_or_user_id
          description: The name of the restaurant or the ID of the user
          required: true
          type: string
      responses:
        "200":
          description: List of orders for specified customer returned
          schema:
            type: array
            items:
              $ref: "#/definitions/Order"
        "404":
          description: Order based on restaurant_or_user_id not found
  /api/core/orders/{restaurant_or_user_id}/{pk}:
    get:
      tags:
      - Core
      summary: "Get an order by restaurant_or_user_id and order ID"
      parameters:
        - name: restaurant_or_user_id
          in: path
          description: "The ID of the user/restaurant who made the order"
          required: true
          type: string
        - name: pk
          in: path
          description: "The ID of the order"
          required: true
          type: integer
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "Order not found"
    delete:
      tags:
      - Core
      summary: "Delete an order by user ID and order ID"
      parameters:
        - name: restaurant_or_user_id
          in: path
          description: "The ID of the user/restaurant who made the order"
          required: true
          type: string
        - name: pk
          in: path
          description: "The ID of the order"
          required: true
          type: integer
      responses:
        204:
          description: "Order deleted"
        404:
          description: "Order not found"
    put:
      tags:
      - Core
      summary: "Update an order by restaurant/user and order ID"
      parameters:
        - name: restaurant_or_user_id
          in: path
          description: "The id of the restaurant/user"
          required: true
          type: string
        - name: pk
          in: path
          description: "The ID of the order"
          required: true
          type: integer
        - name: order
          in: body
          description: "The updated order details"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        200:
          description: "Order updated"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Data Request"
        404:
          description: "Order not found"
  /api/core/{restaurant}/menuItems/:
    get:
      tags:
      - Core
      summary: "Get menu items for a restaurant"
      parameters:
      - name: restaurant
        in: path
        description: "The name of the restaurant"
        required: true
        type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/MenuItem"
        404:
          description: "Restaurant not found"